name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    name: Lint and Test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y shellcheck
        npm install -g markdownlint-cli @commitlint/cli @commitlint/config-conventional

    - name: Run ShellCheck
      run: shellcheck nag.sh

    - name: Run Markdown lint
      run: markdownlint README.md CONTRIBUTING.md --config .markdownlint.json

    - name: Validate commit messages (PR only)
      if: github.event_name == 'pull_request'
      run: |
        # Get the commit messages from the PR
        git fetch origin main
        npx commitlint --from origin/main --to HEAD --verbose

    - name: Test script syntax
      run: |
        # Test that the script has valid bash syntax
        bash -n nag.sh
        echo "✓ Script syntax is valid"

    - name: Security scan
      run: |
        # Basic security checks
        echo "Running basic security checks..."

        # Check for potential issues in shell script
        if grep -n 'eval\|exec\|system\|passthru' nag.sh; then
          echo "⚠️  Warning: Potentially dangerous functions found"
          exit 1
        fi

        # Check for hardcoded credentials
        if grep -i -n 'password\|secret\|token\|key' nag.sh | grep -v '# '; then
          echo "⚠️  Warning: Potential hardcoded credentials found"
          exit 1
        fi

        echo "✓ Basic security checks passed"

  test-package-build:
    runs-on: ubuntu-latest
    name: Test Package Build (Simulation)

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y dpkg-dev

    - name: Test package structure creation
      run: |
        # Simulate the package building process without actually installing
        export WORKDIR="/tmp/test-build"
        export PKGNAME="pve-nonag-trigger"
        export VERSION="1.0"
        export DEBDIR="$WORKDIR/$PKGNAME/DEBIAN"
        export PREFIX="$WORKDIR/$PKGNAME/usr/local"
        export PATCHER="$PREFIX/bin/pve-nonag-patch.sh"

        # Create directory structure
        mkdir -p "$DEBDIR" "$PREFIX/bin"

        # Test control file creation
        cat > "$DEBDIR/control" <<EOF
        Package: $PKGNAME
        Version: $VERSION
        Section: admin
        Priority: optional
        Architecture: all
        Depends: proxmox-widget-toolkit (>= 1)
        Maintainer: localhost <admin@host.local>
        Description: Re-applies the Proxmox subscription nag patch after toolkit upgrades.
        EOF

        # Test that control file is valid
        if ! dpkg-parsechangelog -l"$DEBDIR/control" 2>/dev/null; then
          echo "✓ Control file structure is valid (parse failed as expected for control file)"
        fi

        echo "✓ Package structure test completed"

  release-check:
    runs-on: ubuntu-latest
    name: Release Readiness Check
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check release files
      run: |
        echo "Checking release readiness..."

        # Check required files exist
        required_files=("README.md" "LICENSE" "CONTRIBUTING.md" "nag.sh")
        for file in "${required_files[@]}"; do
          if [[ ! -f "$file" ]]; then
            echo "❌ Missing required file: $file"
            exit 1
          fi
          echo "✓ Found: $file"
        done

        # Check that nag.sh is executable
        if [[ ! -x "nag.sh" ]]; then
          echo "⚠️  Warning: nag.sh is not executable"
        fi

        # Check README has installation instructions
        if ! grep -q "wget.*nag.sh.*bash" README.md; then
          echo "❌ README missing wget installation command"
          exit 1
        fi

        if ! grep -q "curl.*nag.sh.*bash" README.md; then
          echo "❌ README missing curl installation command"
          exit 1
        fi

        echo "✓ Release readiness check passed"
